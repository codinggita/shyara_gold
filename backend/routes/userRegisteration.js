const express = require("express");
const userRoutes = express.Router();
const { createUserWithEmailAndPassword, getAuth, signInWithEmailAndPassword } = require("firebase/auth");
const { firebaseApp, auth } = require("../.config/firebase.config"); // Import Firebase correctly
const User = require('../models/user')

// Function to register a user with Firebase Authentication
const registerUser = async (email, password) => {
    try {
        const registerResponse = await createUserWithEmailAndPassword(auth, email, password);
        return { uid: registerResponse.user.uid, data: registerResponse };
    } catch (error) {
        throw new Error(error.message);
    }
};

const signin = async (email, password) => {
    const serverres = await signInWithEmailAndPassword(auth, email, password)
    return serverres
}

// Test route
userRoutes.get("/testing", (req, res) => {
    console.log("Test route hit");
    res.send("This is the testing route");
});

// User registration route
userRoutes.post("/newuser", async (req, res) => {
    try {
        const { email, password, role } = req.body;

        // Register user in Firebase Authentication
        const userFirebaseId = await registerUser(email, password);
        console.log(userFirebaseId.uid);
        const userID = userFirebaseId.uid

        const newUser = new User({
            email: email,
            role: role || "user", // Default role is 'user',
            token: JSON.stringify(userID) // Firebase UID
        });

        await newUser.save(); // Save to MongoDB

        return res.status(201).json({
            success: true,
            uid: userFirebaseId.uid, // Firebase UID
            fulldata: userFirebaseId.data // Full Firebase response
        });
    } catch (error) {
        return res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

userRoutes.post('/login', async (req, res, next) => {
    try {
        const { email, password } = req.body;

        // This is the uid generated by firebase
        const userFirebaseId = await signin(email, password)

        const databaseRes = await User.findOne({ email: email})


        return res.status(201).json({
            success: true,
            user : databaseRes
        });
    } catch (error) {
        return res.status(500).json({
            success: false,
            message: error.message
        });
    }
})

module.exports = userRoutes;
